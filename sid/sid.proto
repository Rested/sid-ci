
syntax = "proto3";

package sid;

import "google/protobuf/timestamp.proto";


// Interface exported by the server.
service RouteGuide {
  // A simple RPC.
  //
  // Obtains the feature at a given position.
  //
  // A feature with an empty name is returned if there's no feature at the given
  // position.
  rpc GetJob(HealthStatus) returns (Job) {}

  // A server-to-client streaming RPC.
  //
  // Streams health status of the client as it changes. 
  rpc HealthStatusCheckIn(HealthStatus) returns (stream CheckInResponse) {}

  // A client-to-server streaming RPC.
  //
  // Accepts a stream of JobRunEvents on a job being run, returning a
  // job when done.
  rpc RecordJobRun(stream JobRunEvent) returns (Job) {}
}

// HealthStatus
message HealthStatus {
  enum Status {
    INACTIVE = 0;
    READY = 1;
    WORKING = 2;
    LEAVING = 3;
  }
  Status status = 1;
  google.protobuf.Timestamp status_at = 2;
}

message Job {
  enum JobStatus {
    QUEUED = 0;
    BUILDING = 1;
    ABANDONED = 2;
    COMPLETED = 3;
  }
  string repo_name = 1;
  string repo_ssh_url = 2;
  string commit_hexsha = 3;
  JobStatus job_status = 4;
  google.protobuf.Timestamp status_at = 5;
}

message JobRunEvent {
  enum EventType {
    RUN_LOG = 0;
    ERROR = 1;
    // TODO: ARTEFACT = 2; https://ops.tips/blog/sending-files-via-grpc/ w/ streaming
  }
  EventType type = 1;
  string content = 2;
  google.protobuf.Timestamp event_at = 3;
}

message CheckInResponse {
  string response = 1;
}